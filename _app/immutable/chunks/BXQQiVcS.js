import{aB as g,W as k,g as l}from"./DJxVeldX.js";import{g as h}from"./knpjl46v.js";import"./Bit4kGOU.js";import{s as m}from"./gt9WcTCj.js";import{c as T}from"./DjRwOXsZ.js";import{s as y}from"./YXWdkqOL.js";const i=k(null);g(i,t=>t!==null);function U(){const t=window.location.hostname;return t==="localhost"||t==="127.0.0.1"?"http://localhost:5173/":"https://personaxi.com/"}async function B(t,e){const o=await u.post2("/api/auth/ownlogin",{email:t,password:e});if(o.ok){h("/hub");const n=await o.json();i.set(n.access_token)}else{const n=await o.json();throw new Error(n.error||"로그인에 실패했습니다.")}}async function S(){const t=await u.get("/api/user/me");if(t.ok==!1)return null;const e=await t.json();return t.ok&&y.set(e),t.ok?e:null}async function R(){const t=await u.get("/api/user/consent");if(t.ok==!1)return null;const e=await t.json();return t.ok?e:null}async function _(){await u.get("/api/logout"),h("/"),T.set([])}const c="https://api.personaxi.com";let a=null;async function p(){a||(a=fetch(c+"/api/auth/refresh-token",{method:"POST",credentials:"include"}));const t=await a;if(a=null,t.ok){const{access_token:e}=await t.clone().json();i.set(e)}}async function w(t,e={}){e.credentials="include";const o=new Headers(e.headers),n=l(i);if(n)o.set("Authorization",`Bearer ${n}`);else{await p();const s=l(i);if(s)o.set("Authorization",`Bearer ${s}`),(await S()).data.language==""&&m.update(d=>(console.log("Setting Update!!"),d));else throw window.location.href="/login",new Error("Session expired")}e.body&&o.set("Content-Type","application/json"),e.headers=o;let r=await fetch(t,e);try{if(r.status===401){a||(a=fetch(c+"/api/auth/refresh-token",{method:"POST",credentials:"include"}));const s=await a;if(a=null,s.ok){const{access_token:f}=await s.clone().json();return i.set(f),o.set("Authorization",`Bearer ${f}`),e.headers=o,fetch(t,e)}else throw window.location.href="/login",new Error("Session expired")}}catch(s){console.error(s)}return r}const u={get:(t,e)=>w(c+t,{...e,method:"GET"}),get2:(t,e)=>fetch(c+t,{...e,method:"GET",credentials:"include"}),post:(t,e,o)=>w(c+t,{...o,method:"POST",body:JSON.stringify(e)}),post2:(t,e,o)=>fetch(c+t,{...o,method:"POST",credentials:"include",body:JSON.stringify(e)}),ws:(t,e)=>{let o;const n=window.location.protocol==="https:"?"wss:":"ws:";{const s=new URL(c);o=`${n}//${s.host}${t}`}const r=new WebSocket(o);return e.onOpen&&(r.onopen=e.onOpen),e.onMessage&&(r.onmessage=e.onMessage),e.onClose&&(r.onclose=e.onClose),e.onError&&(r.onerror=e.onError),r},isLoggedIn:async()=>!!(l(i)||(await p(),l(i)))};export{u as a,S as b,i as c,R as d,U as g,_ as l,B as o};
